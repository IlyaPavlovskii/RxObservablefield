apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.9"
}

android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

tasks.create(name: "jacocoCoverage", type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for the testDebugUnitTest build."

    classDirectories = fileTree(
            dir: "${project.buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',

                       // Dagger 2
                       '**/*_MembersInjector.class',
                       '**/Dagger*Component.class', // covers component implementations
                       '**/Dagger*Component$Builder.class', // covers component builders
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/Dao*.class',
                       '**/*$ViewInjector*.class',

                       "com/raizlabs/android/dbflow/config/**/*",
                       "android/databinding/**/*",
                       "android/support/v4/**/*",
                       "by/pinc/rx/observablefield/**/*",
                       "com/android/databinding/library/baseAdapters/**/*"
            ]
    )

    sourceDirectories = files(['src/main/java'])
    executionData = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${buildDir}/jacocoRxObservableFieldHtml")
    }
}